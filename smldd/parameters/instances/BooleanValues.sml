(*--------------------------------------------------------------------------*)
(* Hard-coded sets and operations for sets of boolean values.

   The different possible sets are encoded as follow:
   {}    => 0
   {0}   => 1
   {1}   => 2
   {0,1} => 3
*)

(*--------------------------------------------------------------------------*)
structure BooleanValues : VALUES = struct

(*--------------------------------------------------------------------------*)
structure H  = Hash

(*--------------------------------------------------------------------------*)
val discrete = true

(*--------------------------------------------------------------------------*)
type value  = int

(*--------------------------------------------------------------------------*)
fun storedToList v   = case v of
                   0 => []
                 | 1 => [0]
                 | 2 => [1]
                 | 3 => [0,1]
                 | _ => raise DoNotPanic

(*--------------------------------------------------------------------------*)
fun storedFromList xs =
  case ( List.exists (fn x => x = 0) xs, List.exists (fn x => x = 1) xs ) of
    ( false, false ) => 0
  | ( true , false ) => 1
  | ( false, true  ) => 2
  | ( true , true  ) => 3

(*--------------------------------------------------------------------------*)
val valueLt = op <

(*--------------------------------------------------------------------------*)
type stored = int
type values = int

(*--------------------------------------------------------------------------*)
val mkStorable = Util.id

(*--------------------------------------------------------------------------*)
val mkUsable   = Util.id

(*--------------------------------------------------------------------------*)
val storedLt =  op <

(*--------------------------------------------------------------------------*)
val hash = H.const

(*--------------------------------------------------------------------------*)
fun length x = case x of
                 0 => 0
               | 1 => 1
               | 2 => 1
               | 3 => 2
               | _ => raise DoNotPanic

(*--------------------------------------------------------------------------*)
fun storedEmpty x = x = 0

(*--------------------------------------------------------------------------*)
fun toString x = case x of
                   0 => "{}"
                 | 1 => "{0}"
                 | 2 => "{1}"
                 | 3 => "{0,1}"
                 | _ => raise DoNotPanic

(*--------------------------------------------------------------------------*)
val storedToString = toString

(*--------------------------------------------------------------------------*)
fun storedMkEmpty () = 0

(*--------------------------------------------------------------------------*)
val storedHash = H.const

(*--------------------------------------------------------------------------*)
val eq         = (op =)

(*--------------------------------------------------------------------------*)
fun storedUnion []      = 0
|   storedUnion (x::[]) = x
|   storedUnion (x::xs) =
let
  fun unionHelper (x,y) =
    case (x,y) of
      (0,_) => y
    | (_,0) => x
    | (3,_) => 3
    | (_,3) => 3
    | (1,2) => 3
    | (2,1) => 3
    | (_,_) => x
in
  foldl unionHelper x xs
end

(*--------------------------------------------------------------------------*)
fun storedIntersection []      = 0
|   storedIntersection (x::[]) = x
|   storedIntersection (x::xs) =
let
  fun interHelper (x,y) =
    case (x,y) of
      (0,_) => 0
    | (_,0) => 0
    | (1,2) => 0
    | (2,1) => 0
    | (3,_) => y
    | (_,3) => x
    | (_,_) => x
in
  foldl interHelper x xs
end

(*--------------------------------------------------------------------------*)
fun storedDifference(x,y) =
  case (x,y) of

    (0,_) => 0
  | (_,0) => x

  | (_,3) => 0

  | (1,2) => 1

  | (2,1) => 2

  | (3,1) => 2
  | (3,2) => 1

  | (_,_) => 0

(*--------------------------------------------------------------------------*)
end (* structure BooleanValues *)
